// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/simplematchfunction.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TicketList struct {
	Tickets              []*Ticket `protobuf:"bytes,1,rep,name=tickets,proto3" json:"tickets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *TicketList) Reset()         { *m = TicketList{} }
func (m *TicketList) String() string { return proto.CompactTextString(m) }
func (*TicketList) ProtoMessage()    {}
func (*TicketList) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6f93b47448bdf3e, []int{0}
}

func (m *TicketList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TicketList.Unmarshal(m, b)
}
func (m *TicketList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TicketList.Marshal(b, m, deterministic)
}
func (m *TicketList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TicketList.Merge(m, src)
}
func (m *TicketList) XXX_Size() int {
	return xxx_messageInfo_TicketList.Size(m)
}
func (m *TicketList) XXX_DiscardUnknown() {
	xxx_messageInfo_TicketList.DiscardUnknown(m)
}

var xxx_messageInfo_TicketList proto.InternalMessageInfo

func (m *TicketList) GetTickets() []*Ticket {
	if m != nil {
		return m.Tickets
	}
	return nil
}

type SimpleRunRequest struct {
	ProfileName string `protobuf:"bytes,1,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
	// Properties contains custom info about the ticket.  Top level values can be
	// used in indexing and filtering to find tickets.
	Properties *_struct.Struct `protobuf:"bytes,2,opt,name=properties,proto3" json:"properties,omitempty"`
	// Set of Rosters for this match request. Could be empty Rosters used to
	// indicate the composition of the generated Match or they could be partially
	// pre-populated Ticket list to be used in scenarios such as backfill / join
	// in progress.
	Roster               []*Roster              `protobuf:"bytes,3,rep,name=roster,proto3" json:"roster,omitempty"`
	PoolNameToTickets    map[string]*TicketList `protobuf:"bytes,4,rep,name=pool_name_to_tickets,json=poolNameToTickets,proto3" json:"pool_name_to_tickets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *SimpleRunRequest) Reset()         { *m = SimpleRunRequest{} }
func (m *SimpleRunRequest) String() string { return proto.CompactTextString(m) }
func (*SimpleRunRequest) ProtoMessage()    {}
func (*SimpleRunRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6f93b47448bdf3e, []int{1}
}

func (m *SimpleRunRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleRunRequest.Unmarshal(m, b)
}
func (m *SimpleRunRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleRunRequest.Marshal(b, m, deterministic)
}
func (m *SimpleRunRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleRunRequest.Merge(m, src)
}
func (m *SimpleRunRequest) XXX_Size() int {
	return xxx_messageInfo_SimpleRunRequest.Size(m)
}
func (m *SimpleRunRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleRunRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleRunRequest proto.InternalMessageInfo

func (m *SimpleRunRequest) GetProfileName() string {
	if m != nil {
		return m.ProfileName
	}
	return ""
}

func (m *SimpleRunRequest) GetProperties() *_struct.Struct {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *SimpleRunRequest) GetRoster() []*Roster {
	if m != nil {
		return m.Roster
	}
	return nil
}

func (m *SimpleRunRequest) GetPoolNameToTickets() map[string]*TicketList {
	if m != nil {
		return m.PoolNameToTickets
	}
	return nil
}

func init() {
	proto.RegisterType((*TicketList)(nil), "api.TicketList")
	proto.RegisterType((*SimpleRunRequest)(nil), "api.SimpleRunRequest")
	proto.RegisterMapType((map[string]*TicketList)(nil), "api.SimpleRunRequest.PoolNameToTicketsEntry")
}

func init() { proto.RegisterFile("api/simplematchfunction.proto", fileDescriptor_c6f93b47448bdf3e) }

var fileDescriptor_c6f93b47448bdf3e = []byte{
	// 632 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0xd1, 0x4e, 0x13, 0x41,
	0x14, 0xcd, 0x6e, 0xb1, 0x84, 0xa9, 0x89, 0x75, 0x14, 0x68, 0xaa, 0x26, 0x43, 0x09, 0x86, 0x34,
	0x74, 0x07, 0x0a, 0x89, 0xa6, 0xc6, 0x04, 0x54, 0x4c, 0x48, 0x10, 0xcd, 0x82, 0x3e, 0x18, 0x0d,
	0x99, 0x6e, 0x6f, 0xb7, 0x23, 0xbb, 0x33, 0xe3, 0xcc, 0x6c, 0x91, 0x57, 0x3f, 0x41, 0xdf, 0xfc,
	0x19, 0x9f, 0x7d, 0xf6, 0x17, 0x8c, 0x1f, 0xe0, 0x17, 0x98, 0x9d, 0xed, 0x4a, 0x83, 0x7d, 0x6a,
	0xef, 0x39, 0xe7, 0xde, 0x7b, 0xee, 0x9d, 0xbb, 0xe8, 0x1e, 0x53, 0x9c, 0x1a, 0x9e, 0xaa, 0x04,
	0x52, 0x66, 0xa3, 0xd1, 0x30, 0x13, 0x91, 0xe5, 0x52, 0x04, 0x4a, 0x4b, 0x2b, 0x71, 0x85, 0x29,
	0xde, 0x5c, 0xce, 0x35, 0x33, 0xd8, 0x26, 0x76, 0x04, 0x18, 0xc3, 0x62, 0x30, 0x13, 0xec, 0x6e,
	0x2c, 0x65, 0x9c, 0x00, 0xcd, 0x29, 0x26, 0x84, 0xb4, 0x2c, 0x4f, 0x28, 0xd9, 0x0d, 0xf7, 0x13,
	0x75, 0x62, 0x10, 0x1d, 0x73, 0xce, 0xe2, 0x18, 0x34, 0x95, 0xca, 0x29, 0x66, 0xa8, 0xcb, 0x5a,
	0x2e, 0xea, 0x67, 0x43, 0x6a, 0xac, 0xce, 0x22, 0x5b, 0xb0, 0xad, 0x6d, 0x84, 0x4e, 0x78, 0x74,
	0x06, 0xf6, 0x90, 0x1b, 0x8b, 0xd7, 0xd0, 0xbc, 0x75, 0x91, 0x69, 0x78, 0xa4, 0xb2, 0x5e, 0xeb,
	0xd6, 0x02, 0xa6, 0x78, 0x50, 0x28, 0xc2, 0x92, 0x6b, 0xfd, 0xf0, 0x51, 0xfd, 0xd8, 0x8d, 0x1b,
	0x66, 0x22, 0x84, 0x8f, 0x19, 0x18, 0x8b, 0x57, 0xd0, 0x75, 0xa5, 0xe5, 0x90, 0x27, 0x70, 0x2a,
	0x58, 0x0a, 0x0d, 0x8f, 0x78, 0xeb, 0x0b, 0x61, 0x6d, 0x82, 0x1d, 0xb1, 0x14, 0xf0, 0x03, 0x84,
	0x94, 0x96, 0x0a, 0xb4, 0xe5, 0x60, 0x1a, 0x3e, 0xf1, 0xd6, 0x6b, 0xdd, 0xe5, 0xa0, 0xf0, 0x17,
	0x94, 0xfe, 0x82, 0x63, 0xe7, 0x2f, 0x9c, 0x92, 0xe2, 0x55, 0x54, 0xd5, 0xd2, 0x58, 0xd0, 0x8d,
	0xca, 0x94, 0xad, 0xd0, 0x41, 0xe1, 0x84, 0xc2, 0xef, 0xd1, 0x6d, 0x25, 0x65, 0xe2, 0xba, 0x9f,
	0x5a, 0x79, 0x5a, 0x4e, 0x32, 0xe7, 0x52, 0x36, 0x5c, 0xca, 0x55, 0xd7, 0xc1, 0x2b, 0x29, 0x93,
	0xdc, 0xdb, 0x89, 0x2c, 0x86, 0x34, 0xfb, 0xc2, 0xea, 0x8b, 0xf0, 0xa6, 0xba, 0x8a, 0x37, 0x5f,
	0xa3, 0xa5, 0xd9, 0x62, 0x5c, 0x47, 0x95, 0x33, 0xb8, 0x98, 0x0c, 0x9c, 0xff, 0xc5, 0x6b, 0xe8,
	0xda, 0x98, 0x25, 0x19, 0x4c, 0x66, 0xbc, 0x31, 0xb5, 0xc5, 0x7c, 0xcf, 0x61, 0xc1, 0xf6, 0xfc,
	0x87, 0x5e, 0xd7, 0xa0, 0x5b, 0x85, 0xa9, 0x17, 0xf9, 0x6d, 0x3c, 0x9f, 0xdc, 0x06, 0x7e, 0x87,
	0x16, 0xfe, 0x79, 0xc5, 0x8b, 0x33, 0xbd, 0x37, 0xeb, 0xc5, 0x16, 0x72, 0xc0, 0x28, 0x29, 0x0c,
	0xb4, 0xee, 0x7f, 0xfe, 0xf9, 0xeb, 0xab, 0x4f, 0x5a, 0x77, 0xe8, 0x78, 0x6b, 0xd6, 0x41, 0xf6,
	0x74, 0x26, 0x7a, 0x5e, 0xfb, 0xc9, 0x1f, 0xff, 0xcb, 0xde, 0x6f, 0x1f, 0x7f, 0xf7, 0xd0, 0x62,
	0x51, 0x95, 0xb8, 0xee, 0xa4, 0x6c, 0xdf, 0x3a, 0x40, 0xe8, 0xa5, 0x02, 0x51, 0xc0, 0x78, 0x69,
	0x64, 0xad, 0x32, 0x3d, 0x4a, 0xa5, 0x02, 0xd1, 0x71, 0x15, 0x83, 0x01, 0x8c, 0x9b, 0xab, 0x97,
	0x71, 0x67, 0xc0, 0x4d, 0x94, 0x19, 0xb3, 0x5b, 0xbc, 0x66, 0xac, 0x65, 0xa6, 0x4c, 0x10, 0xc9,
	0xb4, 0xfd, 0x06, 0xe1, 0x3d, 0xc5, 0xa2, 0x11, 0x90, 0x6e, 0xb0, 0x49, 0x0e, 0x79, 0x04, 0xc2,
	0x00, 0xde, 0x2d, 0x4b, 0xc6, 0xdc, 0x8e, 0xb2, 0x7e, 0xae, 0xa4, 0x45, 0xea, 0x50, 0xea, 0x98,
	0xa5, 0x60, 0xa6, 0x9a, 0xd1, 0x7e, 0x22, 0xfb, 0x34, 0x65, 0xf9, 0x33, 0xd3, 0xc3, 0x83, 0xa7,
	0xfb, 0x47, 0xc7, 0xfb, 0xdd, 0xca, 0x56, 0xb0, 0xd9, 0xf6, 0x3d, 0xbf, 0x5b, 0x67, 0x4a, 0x25,
	0x3c, 0x72, 0x47, 0x4f, 0x3f, 0x18, 0x29, 0x7a, 0xff, 0x21, 0xe1, 0x23, 0x54, 0xd9, 0xd9, 0xdc,
	0xc1, 0x3b, 0xa8, 0x1d, 0x82, 0xcd, 0xb4, 0x80, 0x01, 0x39, 0x1f, 0x81, 0x20, 0x76, 0x04, 0x44,
	0x83, 0x91, 0x99, 0x8e, 0x80, 0x0c, 0x24, 0x18, 0x22, 0xa4, 0x25, 0xf0, 0x89, 0x1b, 0x1b, 0xe0,
	0x2a, 0x9a, 0xfb, 0xe6, 0x7b, 0xf3, 0xfa, 0x31, 0x6a, 0x5c, 0x2e, 0x83, 0x3c, 0x93, 0x51, 0x96,
	0x82, 0x28, 0x3e, 0x32, 0xbc, 0x32, 0x7b, 0x35, 0xd4, 0x70, 0x0b, 0x74, 0x20, 0x23, 0x43, 0xdf,
	0x56, 0xd5, 0x59, 0x4c, 0x55, 0xbf, 0x5f, 0x75, 0x17, 0xbe, 0xfd, 0x37, 0x00, 0x00, 0xff, 0xff,
	0x05, 0xf2, 0xde, 0xc8, 0x2e, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SimpleMatchFunctionClient is the client API for SimpleMatchFunction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SimpleMatchFunctionClient interface {
	// This is the function that is executed when by the Open Match backend to
	// generate Match proposals.
	SimpleRun(ctx context.Context, in *SimpleRunRequest, opts ...grpc.CallOption) (*RunResponse, error)
}

type simpleMatchFunctionClient struct {
	cc *grpc.ClientConn
}

func NewSimpleMatchFunctionClient(cc *grpc.ClientConn) SimpleMatchFunctionClient {
	return &simpleMatchFunctionClient{cc}
}

func (c *simpleMatchFunctionClient) SimpleRun(ctx context.Context, in *SimpleRunRequest, opts ...grpc.CallOption) (*RunResponse, error) {
	out := new(RunResponse)
	err := c.cc.Invoke(ctx, "/api.SimpleMatchFunction/SimpleRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimpleMatchFunctionServer is the server API for SimpleMatchFunction service.
type SimpleMatchFunctionServer interface {
	// This is the function that is executed when by the Open Match backend to
	// generate Match proposals.
	SimpleRun(context.Context, *SimpleRunRequest) (*RunResponse, error)
}

func RegisterSimpleMatchFunctionServer(s *grpc.Server, srv SimpleMatchFunctionServer) {
	s.RegisterService(&_SimpleMatchFunction_serviceDesc, srv)
}

func _SimpleMatchFunction_SimpleRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleMatchFunctionServer).SimpleRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SimpleMatchFunction/SimpleRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleMatchFunctionServer).SimpleRun(ctx, req.(*SimpleRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SimpleMatchFunction_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.SimpleMatchFunction",
	HandlerType: (*SimpleMatchFunctionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SimpleRun",
			Handler:    _SimpleMatchFunction_SimpleRun_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/simplematchfunction.proto",
}
