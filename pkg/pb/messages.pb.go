// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/messages.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	status "google.golang.org/genproto/googleapis/rpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A Ticket is a basic matchmaking entity in Open Match. In order to enter
// matchmaking using Open Match, the client should generate a Ticket, passing in
// the properties to be associated with this Ticket. Open Match will generate an
// ID for a Ticket during creation. A Ticket could be used to represent an
// individual 'Player' or a 'Group' of players. Open Match will not interpret
// what the Ticket represents but just treat it as a matchmaking unit with a set
// of properties. Open Match stores the Ticket in state storage and enables an
// Assignment to be associated with this Ticket.
type Ticket struct {
	// The Ticket ID generated by Open Match.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Properties contains custom info about the ticket.  Top level values can be
	// used in indexing and filtering to find tickets.
	Properties *_struct.Struct `protobuf:"bytes,2,opt,name=properties,proto3" json:"properties,omitempty"`
	// Assignment associated with the Ticket.
	Assignment *Assignment `protobuf:"bytes,3,opt,name=assignment,proto3" json:"assignment,omitempty"`
	// Tenant ID is the ID used to differentiate tenants in the same Open Match cluster.
	TenantId             string   `protobuf:"bytes,4,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ticket) Reset()         { *m = Ticket{} }
func (m *Ticket) String() string { return proto.CompactTextString(m) }
func (*Ticket) ProtoMessage()    {}
func (*Ticket) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb9fb1f207fd5b8c, []int{0}
}

func (m *Ticket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ticket.Unmarshal(m, b)
}
func (m *Ticket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ticket.Marshal(b, m, deterministic)
}
func (m *Ticket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ticket.Merge(m, src)
}
func (m *Ticket) XXX_Size() int {
	return xxx_messageInfo_Ticket.Size(m)
}
func (m *Ticket) XXX_DiscardUnknown() {
	xxx_messageInfo_Ticket.DiscardUnknown(m)
}

var xxx_messageInfo_Ticket proto.InternalMessageInfo

func (m *Ticket) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Ticket) GetProperties() *_struct.Struct {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *Ticket) GetAssignment() *Assignment {
	if m != nil {
		return m.Assignment
	}
	return nil
}

func (m *Ticket) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

// An Assignment object represents the assignment associated with a Ticket. Open
// match does not require or inspect any fields on assignment.
type Assignment struct {
	// Connection information for this Assignment.
	Connection string `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
	// Other details to be sent to the players.
	Properties *_struct.Struct `protobuf:"bytes,2,opt,name=properties,proto3" json:"properties,omitempty"`
	// Error when finding an Assignment for this Ticket.
	Error                *status.Status `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Assignment) Reset()         { *m = Assignment{} }
func (m *Assignment) String() string { return proto.CompactTextString(m) }
func (*Assignment) ProtoMessage()    {}
func (*Assignment) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb9fb1f207fd5b8c, []int{1}
}

func (m *Assignment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Assignment.Unmarshal(m, b)
}
func (m *Assignment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Assignment.Marshal(b, m, deterministic)
}
func (m *Assignment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Assignment.Merge(m, src)
}
func (m *Assignment) XXX_Size() int {
	return xxx_messageInfo_Assignment.Size(m)
}
func (m *Assignment) XXX_DiscardUnknown() {
	xxx_messageInfo_Assignment.DiscardUnknown(m)
}

var xxx_messageInfo_Assignment proto.InternalMessageInfo

func (m *Assignment) GetConnection() string {
	if m != nil {
		return m.Connection
	}
	return ""
}

func (m *Assignment) GetProperties() *_struct.Struct {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *Assignment) GetError() *status.Status {
	if m != nil {
		return m.Error
	}
	return nil
}

// A hard filter used to query a subset of Tickets meeting the filtering
// criteria.
type Filter struct {
	// Name of the ticket attribute this Filter operates on.
	Attribute string `protobuf:"bytes,1,opt,name=attribute,proto3" json:"attribute,omitempty"`
	// Maximum value. Defaults to positive infinity (any value above minv).
	Max float64 `protobuf:"fixed64,2,opt,name=max,proto3" json:"max,omitempty"`
	// Minimum value. Defaults to 0.
	Min                  float64  `protobuf:"fixed64,3,opt,name=min,proto3" json:"min,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Filter) Reset()         { *m = Filter{} }
func (m *Filter) String() string { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()    {}
func (*Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb9fb1f207fd5b8c, []int{2}
}

func (m *Filter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Filter.Unmarshal(m, b)
}
func (m *Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Filter.Marshal(b, m, deterministic)
}
func (m *Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Filter.Merge(m, src)
}
func (m *Filter) XXX_Size() int {
	return xxx_messageInfo_Filter.Size(m)
}
func (m *Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_Filter proto.InternalMessageInfo

func (m *Filter) GetAttribute() string {
	if m != nil {
		return m.Attribute
	}
	return ""
}

func (m *Filter) GetMax() float64 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *Filter) GetMin() float64 {
	if m != nil {
		return m.Min
	}
	return 0
}

type Pool struct {
	// A developer-chosen human-readable name for this Pool.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Set of Filters indicating the filtering criteria. Selected players must
	// match every Filter.
	Filters              []*Filter `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb9fb1f207fd5b8c, []int{3}
}

func (m *Pool) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pool.Unmarshal(m, b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return xxx_messageInfo_Pool.Size(m)
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

func (m *Pool) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Pool) GetFilters() []*Filter {
	if m != nil {
		return m.Filters
	}
	return nil
}

// A Roster is a named collection of Ticket IDs. It exists so that a Tickets
// associated with a Match can be labelled to belong to a team, sub-team etc. It
// can also be used to represent the current state of a Match in scenarios such
// as backfill, join-in-progress etc.
type Roster struct {
	// A developer-chosen human-readable name for this Roster.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Tickets belonging to this Roster.
	TicketIds            []string `protobuf:"bytes,2,rep,name=ticket_ids,json=ticketIds,proto3" json:"ticket_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Roster) Reset()         { *m = Roster{} }
func (m *Roster) String() string { return proto.CompactTextString(m) }
func (*Roster) ProtoMessage()    {}
func (*Roster) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb9fb1f207fd5b8c, []int{4}
}

func (m *Roster) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Roster.Unmarshal(m, b)
}
func (m *Roster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Roster.Marshal(b, m, deterministic)
}
func (m *Roster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Roster.Merge(m, src)
}
func (m *Roster) XXX_Size() int {
	return xxx_messageInfo_Roster.Size(m)
}
func (m *Roster) XXX_DiscardUnknown() {
	xxx_messageInfo_Roster.DiscardUnknown(m)
}

var xxx_messageInfo_Roster proto.InternalMessageInfo

func (m *Roster) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Roster) GetTicketIds() []string {
	if m != nil {
		return m.TicketIds
	}
	return nil
}

// A MatchProfile is Open Match's representation of a Match specification. It is
// used to indicate the criteria for selecting players for a match. A
// MatchProfile is the input to the API to get matches and is passed to the
// MatchFunction. It contains all the information required by the MatchFunction
// to generate match proposals.
type MatchProfile struct {
	// Name of this match profile.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Set of properties associated with this MatchProfile. (Optional)
	// Open Match does not interpret these properties but passes them through to
	// the MatchFunction.
	Properties *_struct.Struct `protobuf:"bytes,2,opt,name=properties,proto3" json:"properties,omitempty"`
	// Set of pools to be queried when generating a match for this MatchProfile.
	// The pool names can be used in empty Rosters to specify composition of a
	// match.
	Pools []*Pool `protobuf:"bytes,3,rep,name=pools,proto3" json:"pools,omitempty"`
	// Set of Rosters for this match request. Could be empty Rosters used to
	// indicate the composition of the generated Match or they could be partially
	// pre-populated Ticket list to be used in scenarios such as backfill / join
	// in progress.
	Rosters              []*Roster `protobuf:"bytes,4,rep,name=rosters,proto3" json:"rosters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *MatchProfile) Reset()         { *m = MatchProfile{} }
func (m *MatchProfile) String() string { return proto.CompactTextString(m) }
func (*MatchProfile) ProtoMessage()    {}
func (*MatchProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb9fb1f207fd5b8c, []int{5}
}

func (m *MatchProfile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchProfile.Unmarshal(m, b)
}
func (m *MatchProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchProfile.Marshal(b, m, deterministic)
}
func (m *MatchProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchProfile.Merge(m, src)
}
func (m *MatchProfile) XXX_Size() int {
	return xxx_messageInfo_MatchProfile.Size(m)
}
func (m *MatchProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchProfile.DiscardUnknown(m)
}

var xxx_messageInfo_MatchProfile proto.InternalMessageInfo

func (m *MatchProfile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MatchProfile) GetProperties() *_struct.Struct {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *MatchProfile) GetPools() []*Pool {
	if m != nil {
		return m.Pools
	}
	return nil
}

func (m *MatchProfile) GetRosters() []*Roster {
	if m != nil {
		return m.Rosters
	}
	return nil
}

// A Match is used to represent a completed match object. It can be generated by
// a MatchFunction as a proposal or can be returned by OpenMatch as a result in
// response to the FetchMatches call.
// When a match is returned by the FetchMatches call, it should contain at least
// one ticket to be considered as valid.
type Match struct {
	// A Match ID that should be passed through the stack for tracing.
	MatchId string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	// Name of the match profile that generated this Match.
	MatchProfile string `protobuf:"bytes,2,opt,name=match_profile,json=matchProfile,proto3" json:"match_profile,omitempty"`
	// Name of the match function that generated this Match.
	MatchFunction string `protobuf:"bytes,3,opt,name=match_function,json=matchFunction,proto3" json:"match_function,omitempty"`
	// Tickets belonging to this match.
	Tickets []*Ticket `protobuf:"bytes,4,rep,name=tickets,proto3" json:"tickets,omitempty"`
	// Set of Rosters that comprise this Match
	Rosters []*Roster `protobuf:"bytes,5,rep,name=rosters,proto3" json:"rosters,omitempty"`
	// Match properties for this Match. Open Match does not interpret this field.
	Properties           *_struct.Struct `protobuf:"bytes,6,opt,name=properties,proto3" json:"properties,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Match) Reset()         { *m = Match{} }
func (m *Match) String() string { return proto.CompactTextString(m) }
func (*Match) ProtoMessage()    {}
func (*Match) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb9fb1f207fd5b8c, []int{6}
}

func (m *Match) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Match.Unmarshal(m, b)
}
func (m *Match) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Match.Marshal(b, m, deterministic)
}
func (m *Match) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Match.Merge(m, src)
}
func (m *Match) XXX_Size() int {
	return xxx_messageInfo_Match.Size(m)
}
func (m *Match) XXX_DiscardUnknown() {
	xxx_messageInfo_Match.DiscardUnknown(m)
}

var xxx_messageInfo_Match proto.InternalMessageInfo

func (m *Match) GetMatchId() string {
	if m != nil {
		return m.MatchId
	}
	return ""
}

func (m *Match) GetMatchProfile() string {
	if m != nil {
		return m.MatchProfile
	}
	return ""
}

func (m *Match) GetMatchFunction() string {
	if m != nil {
		return m.MatchFunction
	}
	return ""
}

func (m *Match) GetTickets() []*Ticket {
	if m != nil {
		return m.Tickets
	}
	return nil
}

func (m *Match) GetRosters() []*Roster {
	if m != nil {
		return m.Rosters
	}
	return nil
}

func (m *Match) GetProperties() *_struct.Struct {
	if m != nil {
		return m.Properties
	}
	return nil
}

func init() {
	proto.RegisterType((*Ticket)(nil), "api.Ticket")
	proto.RegisterType((*Assignment)(nil), "api.Assignment")
	proto.RegisterType((*Filter)(nil), "api.Filter")
	proto.RegisterType((*Pool)(nil), "api.Pool")
	proto.RegisterType((*Roster)(nil), "api.Roster")
	proto.RegisterType((*MatchProfile)(nil), "api.MatchProfile")
	proto.RegisterType((*Match)(nil), "api.Match")
}

func init() { proto.RegisterFile("api/messages.proto", fileDescriptor_cb9fb1f207fd5b8c) }

var fileDescriptor_cb9fb1f207fd5b8c = []byte{
	// 481 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xc1, 0x6e, 0xd4, 0x30,
	0x10, 0x86, 0x95, 0xcd, 0x6e, 0xba, 0x99, 0x2d, 0x05, 0xf9, 0xd2, 0x50, 0x0a, 0x54, 0x41, 0x95,
	0xf6, 0x94, 0x48, 0xe5, 0xc0, 0x81, 0x53, 0x39, 0x54, 0x5a, 0x24, 0xa4, 0xca, 0xe5, 0xc4, 0x65,
	0xe5, 0x4d, 0xbc, 0xc1, 0x6a, 0x62, 0x5b, 0xb6, 0x23, 0xf1, 0x16, 0x3c, 0x02, 0x07, 0x9e, 0x91,
	0x3b, 0xf2, 0x38, 0x69, 0x03, 0x2a, 0x12, 0xea, 0xcd, 0xf9, 0x67, 0xe6, 0xf7, 0xf7, 0xcf, 0x7a,
	0x81, 0x30, 0x2d, 0xca, 0x8e, 0x5b, 0xcb, 0x1a, 0x6e, 0x0b, 0x6d, 0x94, 0x53, 0x24, 0x66, 0x5a,
	0x9c, 0x1c, 0x37, 0x4a, 0x35, 0x2d, 0x2f, 0x8d, 0xae, 0x4a, 0xeb, 0x98, 0xeb, 0x87, 0xea, 0xc9,
	0xe9, 0x50, 0xc0, 0xaf, 0x5d, 0xbf, 0x2f, 0xad, 0x33, 0x7d, 0xe5, 0x42, 0x35, 0xff, 0x11, 0x41,
	0xf2, 0x59, 0x54, 0xb7, 0xdc, 0x91, 0x23, 0x98, 0x89, 0x3a, 0x8b, 0xce, 0xa2, 0x75, 0x4a, 0x67,
	0xa2, 0x26, 0xef, 0x00, 0xb4, 0x51, 0x9a, 0x1b, 0x27, 0xb8, 0xcd, 0x66, 0x67, 0xd1, 0x7a, 0x75,
	0x71, 0x5c, 0x04, 0xb7, 0x62, 0x74, 0x2b, 0x6e, 0xd0, 0x8d, 0x4e, 0x5a, 0x49, 0x09, 0xc0, 0xac,
	0x15, 0x8d, 0xec, 0xb8, 0x74, 0x59, 0x8c, 0x83, 0x4f, 0x0b, 0xa6, 0x45, 0x71, 0x79, 0x27, 0xd3,
	0x49, 0x0b, 0x79, 0x01, 0xa9, 0xe3, 0x92, 0x49, 0xb7, 0x15, 0x75, 0x36, 0x47, 0x80, 0x65, 0x10,
	0x36, 0x75, 0xfe, 0x3d, 0x02, 0xb8, 0x9f, 0x23, 0xaf, 0x00, 0x2a, 0x25, 0x25, 0xaf, 0x9c, 0x50,
	0x72, 0xa0, 0x9d, 0x28, 0x8f, 0xa7, 0x5e, 0xc3, 0x82, 0x1b, 0xa3, 0xcc, 0x00, 0x4c, 0xc6, 0x19,
	0xa3, 0xab, 0xe2, 0x06, 0x17, 0x4a, 0x43, 0x43, 0xfe, 0x11, 0x92, 0x2b, 0xd1, 0x3a, 0x6e, 0xc8,
	0x29, 0xa4, 0xcc, 0x39, 0x23, 0x76, 0xbd, 0xe3, 0x03, 0xcb, 0xbd, 0x40, 0x9e, 0x41, 0xdc, 0xb1,
	0x6f, 0xc8, 0x10, 0x51, 0x7f, 0x44, 0x45, 0x48, 0xbc, 0xc1, 0x2b, 0x42, 0xe6, 0x97, 0x30, 0xbf,
	0x56, 0xaa, 0x25, 0x04, 0xe6, 0x92, 0x75, 0xa3, 0x09, 0x9e, 0xc9, 0x39, 0x1c, 0xec, 0xf1, 0x1e,
	0x9f, 0x23, 0x5e, 0xaf, 0x2e, 0x56, 0xb8, 0xc4, 0x70, 0x37, 0x1d, 0x6b, 0xf9, 0x7b, 0x48, 0xa8,
	0xb2, 0x1e, 0xe7, 0x21, 0x93, 0x97, 0x00, 0x0e, 0x7f, 0xdf, 0xad, 0xa8, 0x83, 0x4f, 0x4a, 0xd3,
	0xa0, 0x6c, 0x6a, 0x9b, 0xff, 0x8c, 0xe0, 0xf0, 0x13, 0x73, 0xd5, 0xd7, 0x6b, 0xa3, 0xf6, 0xa2,
	0xe5, 0x0f, 0x7a, 0x3c, 0x7a, 0xa7, 0xaf, 0x61, 0xa1, 0x95, 0x6a, 0x6d, 0x16, 0x23, 0x7f, 0x8a,
	0xfc, 0x3e, 0x2f, 0x0d, 0xba, 0x8f, 0x68, 0x90, 0xdd, 0x66, 0xf3, 0x49, 0xc4, 0x90, 0x87, 0x8e,
	0xb5, 0xfc, 0x57, 0x04, 0x0b, 0xa4, 0x24, 0xcf, 0x61, 0xd9, 0xf9, 0xc3, 0xf6, 0xee, 0xa9, 0x1e,
	0xe0, 0xf7, 0xa6, 0x26, 0x6f, 0xe0, 0x49, 0x28, 0xe9, 0x10, 0x05, 0x41, 0x53, 0x7a, 0xd8, 0x4d,
	0xe3, 0x9d, 0xc3, 0x51, 0x68, 0xda, 0xf7, 0x32, 0x3c, 0xa1, 0x18, 0xbb, 0xc2, 0xe8, 0xd5, 0x20,
	0x7a, 0xae, 0xb0, 0xa3, 0x3f, 0xb9, 0xc2, 0x3f, 0x85, 0x8e, 0xb5, 0x29, 0xfe, 0xe2, 0xdf, 0xf8,
	0x7f, 0xed, 0x2f, 0xf9, 0xef, 0xfd, 0x7d, 0x58, 0x7e, 0x49, 0xf4, 0x6d, 0x53, 0xea, 0xdd, 0x2e,
	0xc1, 0xb6, 0xb7, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xdf, 0x6b, 0x55, 0x20, 0x00, 0x04, 0x00,
	0x00,
}
