{
  "swagger": "2.0",
  "info": {
    "title": "api/protobuf-spec/mmlogic.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/logic/match-profiles/{match.id}": {
      "get": {
        "summary": "Send GetProfile a match object with the ID field populated, it will return a\n 'filled' one.\n Note: filters are assumed to have been checked for validity by the\n backendapi  when accepting a profile",
        "operationId": "GetProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetProfileResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "match.id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "match.properties",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "match.error",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "match.status",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MmLogic"
        ]
      }
    },
    "/v1/logic/match-proposals": {
      "put": {
        "summary": "CreateProposal is called by MMFs that wish to write their results to\na proposed MatchObject, that can be sent out the Backend API once it has\nbeen approved (by default, by the evaluator process).\n - adds all players in all Rosters to the proposed player ignore list\n - writes the proposed match to the provided key\n - adds that key to the list of proposals to be considered\nINPUT: \n * TO RETURN A MATCHOBJECT AFTER A SUCCESSFUL MMF RUN\n   To create a match MatchObject message with these fields populated:\n     - id, set to the value of the MMF_PROPOSAL_ID env var\n     - properties\n     - error.  You must explicitly set this to an empty string if your MMF\n     - roster, with the playerIDs filled in the 'players' repeated field. \n     - [optional] pools, set to the output from the 'GetPlayerPools' call,\n       will populate the pools with stats about how many players the filters\n       matched and how long the filters took to run, which will be sent out\n       the backend api along with your match results.\n       was successful.\n * TO RETURN AN ERROR \n   To report a failure or error, send a MatchObject message with these\n   these fields populated:\n     - id, set to the value of the MMF_ERROR_ID env var. \n     - error, set to a string value describing the error your MMF encountered.\n     - [optional] properties, anything you put here is returned to the\n       backend along with your error.\n     - [optional] rosters, anything you put here is returned to the\n       backend along with your error.\n     - [optional] pools, set to the output from the 'GetPlayerPools' call,\n       will populate the pools with stats about how many players the filters\n       matched and how long the filters took to run, which will be sent out\n       the backend api along with your match results.\nOUTPUT: a Result message with a boolean success value and an error string\nif an error was encountered",
        "operationId": "CreateProposal",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiCreateProposalResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiCreateProposalRequest"
            }
          }
        ],
        "tags": [
          "MmLogic"
        ]
      }
    },
    "/v1/logic/player-pools/{player_pool.name}": {
      "get": {
        "summary": "Player listing and filtering functions",
        "description": "RetrievePlayerPool gets the list of players that match every Filter in the\nPlayerPool, .excluding players in any configured ignore lists.  It\ncombines the results, and returns the resulting player pool.",
        "operationId": "GetPlayerPool",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "$ref": "#/x-stream-definitions/apiGetPlayerPoolResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "player_pool.name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "player_pool.roster.name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "player_pool.stats.count",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "player_pool.stats.elapsed",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "tags": [
          "MmLogic"
        ]
      }
    }
  },
  "definitions": {
    "PlayerAttribute": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "apiCreateProposalRequest": {
      "type": "object",
      "properties": {
        "match": {
          "$ref": "#/definitions/messagesMatchObject"
        }
      }
    },
    "apiCreateProposalResponse": {
      "type": "object"
    },
    "apiGetAllIgnoredPlayersResponse": {
      "type": "object",
      "properties": {
        "roster": {
          "$ref": "#/definitions/messagesRoster"
        }
      }
    },
    "apiGetPlayerPoolResponse": {
      "type": "object",
      "properties": {
        "player_pool": {
          "$ref": "#/definitions/messagesPlayerPool"
        }
      }
    },
    "apiGetProfileResponse": {
      "type": "object",
      "properties": {
        "match": {
          "$ref": "#/definitions/messagesMatchObject"
        }
      }
    },
    "apiListIgnoredPlayersResponse": {
      "type": "object",
      "properties": {
        "roster": {
          "$ref": "#/definitions/messagesRoster"
        }
      }
    },
    "messagesFilter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "attribute": {
          "type": "string"
        },
        "maxv": {
          "type": "string",
          "format": "int64"
        },
        "minv": {
          "type": "string",
          "format": "int64"
        },
        "stats": {
          "$ref": "#/definitions/messagesStats"
        }
      },
      "description": "A 'hard' filter to apply to the player pool."
    },
    "messagesIlInput": {
      "type": "object",
      "description": "IlInput is an empty message reserved for future use."
    },
    "messagesMatchObject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "properties": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "rosters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/messagesRoster"
          }
        },
        "pools": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/messagesPlayerPool"
          }
        },
        "status": {
          "type": "string"
        }
      },
      "description": "Open Match's internal representation and wire protocol format for \"MatchObjects\".\nIn order to request a match using the Backend API, your backend code should generate\na new MatchObject with an ID and properties filled in (for more details about valid\nvalues for these fields, see the documentation).  Open Match then sends the Match\nObject through to your matchmaking function, where you add players to 'rosters' and\nstore any schemaless data you wish in the 'properties' field.  The MatchObject\nis then sent, populated, out through the Backend API to your backend code.\n\nMatchObjects contain a number of fields, but many gRPC calls that take a\nMatchObject as input only require a few of them to be filled in.  Check the\ngRPC function in question for more details."
    },
    "messagesPlayer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "properties": {
          "type": "string"
        },
        "pool": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlayerAttribute"
          }
        },
        "assignment": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "error": {
          "type": "string"
        }
      },
      "description": "Open Match's internal representation and wire protocol format for \"Players\".\nIn order to enter matchmaking using the Frontend API, your client code should generate\na consistent (same result for each client every time they launch) with an ID and\nproperties filled in (for more details about valid values for these fields,\nsee the documentation).\nPlayers contain a number of fields, but the gRPC calls that take a\nPlayer as input only require a few of them to be filled in.  Check the\ngRPC function in question for more details."
    },
    "messagesPlayerPool": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "filters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/messagesFilter"
          }
        },
        "roster": {
          "$ref": "#/definitions/messagesRoster"
        },
        "stats": {
          "$ref": "#/definitions/messagesStats"
        }
      },
      "description": "PlayerPools are defined by a set of 'hard' filters, and can be filled in\nwith the players that match those filters.\n\nPlayerPools contain a number of fields, but many gRPC calls that take a\nPlayerPool as input only require a few of them to be filled in.  Check the\ngRPC function in question for more details."
    },
    "messagesRoster": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "players": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/messagesPlayer"
          }
        }
      },
      "description": "Data structure to hold a list of players in a match."
    },
    "messagesStats": {
      "type": "object",
      "properties": {
        "count": {
          "type": "string",
          "format": "int64"
        },
        "elapsed": {
          "type": "number",
          "format": "double"
        }
      },
      "title": "Holds statistics"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "runtimeStreamError": {
      "type": "object",
      "properties": {
        "grpc_code": {
          "type": "integer",
          "format": "int32"
        },
        "http_code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "http_status": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  },
  "x-stream-definitions": {
    "apiGetPlayerPoolResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/apiGetPlayerPoolResponse"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of apiGetPlayerPoolResponse"
    }
  }
}
