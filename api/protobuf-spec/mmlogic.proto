// Copyright 2018 Google LLC
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = 'proto3';
package api;
option go_package = "internal/pb";

// The protobuf messages sent in the gRPC calls are defined 'messages.proto'.
import 'api/protobuf-spec/messages.proto';
import 'google/api/annotations.proto';

message GetProfileRequest {
  messages.MatchObject match = 1;
}

message GetProfileResponse {
  messages.MatchObject match = 1;
}

message CreateProposalRequest {
  messages.MatchObject match = 1;
}

message CreateProposalResponse {
}

message GetPlayerPoolRequest {
  messages.PlayerPool player_pool = 1;
}

message GetPlayerPoolResponse {
  messages.PlayerPool player_pool = 1;
}

message GetAllIgnoredPlayersRequest {
  messages.IlInput ignore_player = 1;
}

message GetAllIgnoredPlayersResponse {
  messages.Roster roster = 1;
}

message ListIgnoredPlayersRequest {
  messages.IlInput ignore_player = 1;
}

message ListIgnoredPlayersResponse {
  messages.Roster roster = 1;
}

// The MMLogic API provides utility functions for common MMF functionality, such
// as retreiving profiles and players from state storage, writing results to state storage,
// and exposing metrics and statistics.
service MmLogic {
  // Profile and match object functions

  //  Send GetProfile a match object with the ID field populated, it will return a
  //  'filled' one.
  //  Note: filters are assumed to have been checked for validity by the
  //  backendapi  when accepting a profile
  rpc GetProfile(GetProfileRequest) returns (GetProfileResponse) {
    option (google.api.http).get = "/v1/logic/match-profiles/{match.id}";
  }

  // CreateProposal is called by MMFs that wish to write their results to
  // a proposed MatchObject, that can be sent out the Backend API once it has
  // been approved (by default, by the evaluator process).
  //  - adds all players in all Rosters to the proposed player ignore list
  //  - writes the proposed match to the provided key
  //  - adds that key to the list of proposals to be considered
  // INPUT: 
  //  * TO RETURN A MATCHOBJECT AFTER A SUCCESSFUL MMF RUN
  //    To create a match MatchObject message with these fields populated:
  //      - id, set to the value of the MMF_PROPOSAL_ID env var
  //      - properties
  //      - error.  You must explicitly set this to an empty string if your MMF
  //      - roster, with the playerIDs filled in the 'players' repeated field. 
  //      - [optional] pools, set to the output from the 'GetPlayerPools' call,
  //        will populate the pools with stats about how many players the filters
  //        matched and how long the filters took to run, which will be sent out
  //        the backend api along with your match results.
  //        was successful.
  //  * TO RETURN AN ERROR 
  //    To report a failure or error, send a MatchObject message with these
  //    these fields populated:
  //      - id, set to the value of the MMF_ERROR_ID env var. 
  //      - error, set to a string value describing the error your MMF encountered.
  //      - [optional] properties, anything you put here is returned to the
  //        backend along with your error.
  //      - [optional] rosters, anything you put here is returned to the
  //        backend along with your error.
  //      - [optional] pools, set to the output from the 'GetPlayerPools' call,
  //        will populate the pools with stats about how many players the filters
  //        matched and how long the filters took to run, which will be sent out
  //        the backend api along with your match results.
  // OUTPUT: a Result message with a boolean success value and an error string
  // if an error was encountered
  rpc CreateProposal(CreateProposalRequest) returns (CreateProposalResponse) {
    option (google.api.http) = {
      put: "/v1/logic/match-proposals"
      body: "*"
    };
  }

  // Player listing and filtering functions
  //
  // RetrievePlayerPool gets the list of players that match every Filter in the
  // PlayerPool, .excluding players in any configured ignore lists.  It
  // combines the results, and returns the resulting player pool.
  rpc GetPlayerPool(GetPlayerPoolRequest) returns (stream GetPlayerPoolResponse) {
    option (google.api.http).get = "/v1/logic/player-pools/{player_pool.name}";
  }

  // Ignore List functions
  //
  // IlInput is an empty message reserved for future use.
  rpc GetAllIgnoredPlayers(GetAllIgnoredPlayersRequest) returns (GetAllIgnoredPlayersResponse) {}
  // ListIgnoredPlayers retrieves players from the ignore list specified in the
  // config file under 'ignoreLists.proposed.name'.
  rpc ListIgnoredPlayers(ListIgnoredPlayersRequest) returns (ListIgnoredPlayersResponse) {}

  // NYI
  // UpdateMetrics sends stats about the MMF run to export to a metrics aggregation tool 
  // like Prometheus or StackDriver.
  // rpc UpdateMetrics(messages.NYI) returns (messages.Results) {}
}
