{
  "swagger": "2.0",
  "info": {
    "title": "api/protobuf-spec/frontend.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/frontend/players": {
      "put": {
        "summary": "CreatePlayer will put the player  in state storage, and then look\nthrough the 'properties' field for the attributes you have defined as\nindices your matchmaker config.  If the attributes exist and are valid\nintegers, they will be indexed.\nINPUT: Player message with these fields populated:\n - id\n - properties\nOUTPUT: Result message denoting success or failure (and an error if\nnecessary)",
        "operationId": "CreatePlayer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiCreatePlayerResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiCreatePlayerRequest"
            }
          }
        ],
        "tags": [
          "Frontend"
        ]
      }
    },
    "/v1/frontend/players/{player.id}": {
      "get": {
        "summary": "GetUpdates streams matchmaking results from Open Match for the\nprovided player ID.\nINPUT: Player message with the 'id' field populated.\nOUTPUT: a stream of player objects with one or more of the following\nfields populated, if an update to that field is seen in state storage:\n - 'assignment': string that usually contains game server connection information.\n - 'status': string to communicate current matchmaking status to the client.\n - 'error': string to pass along error information to the client.",
        "description": "During normal operation, the expectation is that the 'assignment' field\nwill be updated by a Backend process calling the 'CreateAssignments' Backend API\nendpoint.  'Status' and 'Error' are free for developers to use as they see fit.  \nEven if you had multiple players enter a matchmaking request as a group, the\nBackend API 'CreateAssignments' call will write the results to state\nstorage separately under each player's ID. OM expects you to make all game\nclients 'GetUpdates' with their own ID from the Frontend API to get\ntheir results.\n\nNOTE: This call generates a small amount of load on the Frontend API and state\n storage while watching the player record for updates. You are expected\n to close the stream from your client after receiving your matchmaking\n results (or a reasonable timeout), or you will continue to\n generate load on OM until you do!\nNOTE: Just bear in mind that every update will send egress traffic from\n Open Match to game clients! Frugality is recommended.",
        "operationId": "GetUpdates",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "$ref": "#/x-stream-definitions/apiGetUpdatesResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "player.id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "player.properties",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "player.pool",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "player.assignment",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "player.status",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "player.error",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Frontend"
        ]
      },
      "delete": {
        "summary": "DeletePlayer removes the player from state storage by doing the\nfollowing:\n 1) Delete player from configured indices.  This effectively removes the\n    player from matchmaking when using recommended MMF patterns.\n    Everything after this is just cleanup to save stage storage space.\n 2) 'Lazily' delete the player's state storage record.  This is kicked\n    off in the background and may take some time to complete.\n 2) 'Lazily' delete the player's metadata indicies (like, the timestamp when \n    they called CreatePlayer, and the last time the record was accessed).  This \n    is also kicked off in the background and may take some time to complete.\nINPUT: Player message with the 'id' field populated.\nOUTPUT: Result message denoting success or failure (and an error if\nnecessary)",
        "operationId": "DeletePlayer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDeletePlayerResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "player.id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "player.properties",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "player.pool",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "player.assignment",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "player.status",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "player.error",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Frontend"
        ]
      }
    }
  },
  "definitions": {
    "PlayerAttribute": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "apiCreatePlayerRequest": {
      "type": "object",
      "properties": {
        "player": {
          "$ref": "#/definitions/messagesPlayer"
        }
      }
    },
    "apiCreatePlayerResponse": {
      "type": "object"
    },
    "apiDeletePlayerResponse": {
      "type": "object"
    },
    "apiGetUpdatesResponse": {
      "type": "object",
      "properties": {
        "player": {
          "$ref": "#/definitions/messagesPlayer"
        }
      }
    },
    "messagesPlayer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "properties": {
          "type": "string"
        },
        "pool": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlayerAttribute"
          }
        },
        "assignment": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "error": {
          "type": "string"
        }
      },
      "description": "Open Match's internal representation and wire protocol format for \"Players\".\nIn order to enter matchmaking using the Frontend API, your client code should generate\na consistent (same result for each client every time they launch) with an ID and\nproperties filled in (for more details about valid values for these fields,\nsee the documentation).\nPlayers contain a number of fields, but the gRPC calls that take a\nPlayer as input only require a few of them to be filled in.  Check the\ngRPC function in question for more details."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "runtimeStreamError": {
      "type": "object",
      "properties": {
        "grpc_code": {
          "type": "integer",
          "format": "int32"
        },
        "http_code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "http_status": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  },
  "x-stream-definitions": {
    "apiGetUpdatesResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/apiGetUpdatesResponse"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of apiGetUpdatesResponse"
    }
  }
}
