{
  "swagger": "2.0",
  "info": {
    "title": "api/protobuf-spec/matchfunction.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/function": {
      "put": {
        "summary": "The assumption is that there will be one service for each MMF that is\nbeing served.  Build your MMF in the appropriate serving harness, deploy it\nto the K8s cluster with a unique service name, then connect to that service\nand call 'Run()' to execute the fuction.",
        "operationId": "Run",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiRunResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiRunRequest"
            }
          }
        ],
        "tags": [
          "MatchFunction"
        ]
      }
    }
  },
  "definitions": {
    "PlayerAttribute": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "apiRunRequest": {
      "type": "object",
      "properties": {
        "profile_id": {
          "type": "string"
        },
        "proposal_id": {
          "type": "string"
        },
        "result_id": {
          "type": "string"
        },
        "match_object": {
          "$ref": "#/definitions/messagesMatchObject"
        },
        "timestamp": {
          "type": "string"
        }
      },
      "description": "Request message sent to the MMF."
    },
    "apiRunResponse": {
      "type": "object"
    },
    "messagesFilter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "attribute": {
          "type": "string"
        },
        "maxv": {
          "type": "string",
          "format": "int64"
        },
        "minv": {
          "type": "string",
          "format": "int64"
        },
        "stats": {
          "$ref": "#/definitions/messagesStats"
        }
      },
      "description": "A 'hard' filter to apply to the player pool."
    },
    "messagesMatchObject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "properties": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "rosters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/messagesRoster"
          }
        },
        "pools": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/messagesPlayerPool"
          }
        },
        "status": {
          "type": "string"
        }
      },
      "description": "Open Match's internal representation and wire protocol format for \"MatchObjects\".\nIn order to request a match using the Backend API, your backend code should generate\na new MatchObject with an ID and properties filled in (for more details about valid\nvalues for these fields, see the documentation).  Open Match then sends the Match\nObject through to your matchmaking function, where you add players to 'rosters' and\nstore any schemaless data you wish in the 'properties' field.  The MatchObject\nis then sent, populated, out through the Backend API to your backend code.\n\nMatchObjects contain a number of fields, but many gRPC calls that take a\nMatchObject as input only require a few of them to be filled in.  Check the\ngRPC function in question for more details."
    },
    "messagesPlayer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "properties": {
          "type": "string"
        },
        "pool": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlayerAttribute"
          }
        },
        "assignment": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "error": {
          "type": "string"
        }
      },
      "description": "Open Match's internal representation and wire protocol format for \"Players\".\nIn order to enter matchmaking using the Frontend API, your client code should generate\na consistent (same result for each client every time they launch) with an ID and\nproperties filled in (for more details about valid values for these fields,\nsee the documentation).\nPlayers contain a number of fields, but the gRPC calls that take a\nPlayer as input only require a few of them to be filled in.  Check the\ngRPC function in question for more details."
    },
    "messagesPlayerPool": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "filters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/messagesFilter"
          }
        },
        "roster": {
          "$ref": "#/definitions/messagesRoster"
        },
        "stats": {
          "$ref": "#/definitions/messagesStats"
        }
      },
      "description": "PlayerPools are defined by a set of 'hard' filters, and can be filled in\nwith the players that match those filters.\n\nPlayerPools contain a number of fields, but many gRPC calls that take a\nPlayerPool as input only require a few of them to be filled in.  Check the\ngRPC function in question for more details."
    },
    "messagesRoster": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "players": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/messagesPlayer"
          }
        }
      },
      "description": "Data structure to hold a list of players in a match."
    },
    "messagesStats": {
      "type": "object",
      "properties": {
        "count": {
          "type": "string",
          "format": "int64"
        },
        "elapsed": {
          "type": "number",
          "format": "double"
        }
      },
      "title": "Holds statistics"
    }
  }
}
