{
  "swagger": "2.0",
  "info": {
    "title": "api/protobuf-spec/backend.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/backend/assignments": {
      "delete": {
        "summary": "Remove DGS connection info from state storage for players. \nINPUT: Roster message with the 'players' field populated. \n   The only field in the Roster's Player messages used by\n   DeleteAssignments is the 'id' field.  All others are silently ignored.  If\n   you need to delete multiple rosters, make multiple calls.",
        "operationId": "DeleteAssignments2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDeleteAssignmentsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "roster.name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Backend"
        ]
      },
      "put": {
        "summary": "Write the connection info for the list of players in the\nAssignments.messages.Rosters to state storage.  The Frontend API is\nresponsible for sending anything sent here to the game clients.\nSending a player to this function kicks off a process that removes\nthe player from future matchmaking functions by adding them to the \n'deindexed' player list and then deleting their player ID from state storage\nindexes.\nINPUT: Assignments message with these fields populated:\n - assignment, anything you write to this string is sent to Frontend API \n - rosters. You can send any number of rosters, containing any number of\n    player messages. All players from all rosters will be sent the assignment.\n    The only field in the Roster's Player messages used by CreateAssignments is\n    the id field.  All other fields in the Player messages are silently ignored.",
        "operationId": "CreateAssignments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiCreateAssignmentsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiCreateAssignmentsRequest"
            }
          }
        ],
        "tags": [
          "Backend"
        ]
      }
    },
    "/v1/backend/matches": {
      "delete": {
        "summary": "Delete a MatchObject from state storage manually. (MatchObjects in state\nstorage will also automatically expire after a while, defined in the config)\nINPUT: MatchObject message with the 'id' field populated. \n(All other fields are ignored.)",
        "operationId": "DeleteMatch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDeleteMatchResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiDeleteMatchRequest"
            }
          }
        ],
        "tags": [
          "Backend"
        ]
      },
      "put": {
        "summary": "Run MMF once.  Return a matchobject that fits this profile.\nINPUT: MatchObject message with these fields populated:\n - id\n - properties\n - [optional] roster, any fields you fill are available to your MMF.\n - [optional] pools, any fields you fill are available to your MMF.\nOUTPUT: MatchObject message with these fields populated:\n - id\n - properties\n - error. Empty if no error was encountered\n - rosters, if you choose to fill them in your MMF. (Recommended)\n - pools, if you used the MMLogicAPI in your MMF. (Recommended, and provides stats)",
        "operationId": "CreateMatch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiCreateMatchResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiCreateMatchRequest"
            }
          }
        ],
        "tags": [
          "Backend"
        ]
      }
    },
    "/v1/backend/matches/{match.id}": {
      "delete": {
        "summary": "Delete a MatchObject from state storage manually. (MatchObjects in state\nstorage will also automatically expire after a while, defined in the config)\nINPUT: MatchObject message with the 'id' field populated. \n(All other fields are ignored.)",
        "operationId": "DeleteMatch2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDeleteMatchResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "match.id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "match.properties",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "match.error",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "match.status",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Backend"
        ]
      }
    },
    "/v1/backend/matches/{match.id}/{match.properties}": {
      "get": {
        "summary": "Continually run MMF and stream MatchObjects that fit this profile until\nthe backend client closes the connection.  Same inputs/outputs as CreateMatch.",
        "operationId": "ListMatches",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "$ref": "#/x-stream-definitions/apiListMatchesResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "match.id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "match.properties",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "match.error",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "match.status",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Backend"
        ]
      }
    }
  },
  "definitions": {
    "PlayerAttribute": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "apiCreateAssignmentsRequest": {
      "type": "object",
      "properties": {
        "assignment": {
          "$ref": "#/definitions/messagesAssignments"
        }
      }
    },
    "apiCreateAssignmentsResponse": {
      "type": "object"
    },
    "apiCreateMatchRequest": {
      "type": "object",
      "properties": {
        "match": {
          "$ref": "#/definitions/messagesMatchObject"
        }
      }
    },
    "apiCreateMatchResponse": {
      "type": "object",
      "properties": {
        "match": {
          "$ref": "#/definitions/messagesMatchObject"
        }
      }
    },
    "apiDeleteAssignmentsRequest": {
      "type": "object",
      "properties": {
        "roster": {
          "$ref": "#/definitions/messagesRoster"
        }
      }
    },
    "apiDeleteAssignmentsResponse": {
      "type": "object"
    },
    "apiDeleteMatchRequest": {
      "type": "object",
      "properties": {
        "match": {
          "$ref": "#/definitions/messagesMatchObject"
        }
      }
    },
    "apiDeleteMatchResponse": {
      "type": "object"
    },
    "apiListMatchesResponse": {
      "type": "object",
      "properties": {
        "match": {
          "$ref": "#/definitions/messagesMatchObject"
        }
      }
    },
    "messagesAssignments": {
      "type": "object",
      "properties": {
        "rosters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/messagesRoster"
          }
        },
        "assignment": {
          "type": "string"
        }
      }
    },
    "messagesFilter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "attribute": {
          "type": "string"
        },
        "maxv": {
          "type": "string",
          "format": "int64"
        },
        "minv": {
          "type": "string",
          "format": "int64"
        },
        "stats": {
          "$ref": "#/definitions/messagesStats"
        }
      },
      "description": "A 'hard' filter to apply to the player pool."
    },
    "messagesMatchObject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "properties": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "rosters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/messagesRoster"
          }
        },
        "pools": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/messagesPlayerPool"
          }
        },
        "status": {
          "type": "string"
        }
      },
      "description": "Open Match's internal representation and wire protocol format for \"MatchObjects\".\nIn order to request a match using the Backend API, your backend code should generate\na new MatchObject with an ID and properties filled in (for more details about valid\nvalues for these fields, see the documentation).  Open Match then sends the Match\nObject through to your matchmaking function, where you add players to 'rosters' and\nstore any schemaless data you wish in the 'properties' field.  The MatchObject\nis then sent, populated, out through the Backend API to your backend code.\n\nMatchObjects contain a number of fields, but many gRPC calls that take a\nMatchObject as input only require a few of them to be filled in.  Check the\ngRPC function in question for more details."
    },
    "messagesPlayer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "properties": {
          "type": "string"
        },
        "pool": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlayerAttribute"
          }
        },
        "assignment": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "error": {
          "type": "string"
        }
      },
      "description": "Open Match's internal representation and wire protocol format for \"Players\".\nIn order to enter matchmaking using the Frontend API, your client code should generate\na consistent (same result for each client every time they launch) with an ID and\nproperties filled in (for more details about valid values for these fields,\nsee the documentation).\nPlayers contain a number of fields, but the gRPC calls that take a\nPlayer as input only require a few of them to be filled in.  Check the\ngRPC function in question for more details."
    },
    "messagesPlayerPool": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "filters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/messagesFilter"
          }
        },
        "roster": {
          "$ref": "#/definitions/messagesRoster"
        },
        "stats": {
          "$ref": "#/definitions/messagesStats"
        }
      },
      "description": "PlayerPools are defined by a set of 'hard' filters, and can be filled in\nwith the players that match those filters.\n\nPlayerPools contain a number of fields, but many gRPC calls that take a\nPlayerPool as input only require a few of them to be filled in.  Check the\ngRPC function in question for more details."
    },
    "messagesRoster": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "players": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/messagesPlayer"
          }
        }
      },
      "description": "Data structure to hold a list of players in a match."
    },
    "messagesStats": {
      "type": "object",
      "properties": {
        "count": {
          "type": "string",
          "format": "int64"
        },
        "elapsed": {
          "type": "number",
          "format": "double"
        }
      },
      "title": "Holds statistics"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "runtimeStreamError": {
      "type": "object",
      "properties": {
        "grpc_code": {
          "type": "integer",
          "format": "int32"
        },
        "http_code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "http_status": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  },
  "x-stream-definitions": {
    "apiListMatchesResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/apiListMatchesResponse"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of apiListMatchesResponse"
    }
  }
}
