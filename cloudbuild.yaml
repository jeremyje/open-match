# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

################################################################################
#                   Open Match Script for Google Cloud Build                   #
################################################################################

# To run this locally:
# cloud-build-local --config=cloudbuild.yaml --dryrun=false --substitutions=_OM_VERSION=DEV .
# To run this remotely:
# gcloud builds submit --config=cloudbuild.yaml --substitutions=_OM_VERSION=DEV .

# Requires gcloud to be installed to work. (https://cloud.google.com/sdk/)
# gcloud auth login
# gcloud components install cloud-build-local

# This YAML contains all the build steps for building Open Match.
# All PRs are verified against this script to prevent build breakages and regressions.

# Conventions
# Each build step is ID'ed with "Prefix: Description".
#   The prefix portion determines what kind of step it is and it's impact.
#   Docker Image: Read-Only, outputs a docker image.
#   Lint: Read-Only, verifies correctness and formatting of a file.
#   Build: Read-Write, outputs a build artifact. Ok to run in parallel if the artifact will not collide with another one.
#   Generate: Read-Write, outputs files within /workspace that are used in other build step. Do not run these in parallel.
#   Setup: Read-Write, similar to generate but steps that run before any other step.

# Some useful things to know about Cloud Build.
# The root of this repository is always stored in /workspace.
#    Any modifications that occur within /workspace are persisted between builds anything else is forgotten.
# If a build step has intermediate files that need to be persisted for a future step then use volumes.
#    An example of this is the go-vol which is where the pkg/ data for go mod is stored.
#    More information here: https://cloud.google.com/cloud-build/docs/build-config#build_steps
# A build step is basically a docker image that is tuned for Cloud Build,
#    https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/go

steps:
- id: 'Docker Image: open-match-build'
  name: gcr.io/kaniko-project/executor
  args: ['--destination=gcr.io/$PROJECT_ID/open-match-build', '--cache=true', '--cache-ttl=48h', '--dockerfile=Dockerfile.ci', '.']
  waitFor: ['-']

- id: 'Build: Clean'
  name: 'gcr.io/$PROJECT_ID/open-match-build'
  args: ['make', 'clean']
  waitFor: ['Docker Image: open-match-build']

- id: 'Test: Markdown'
  name: 'gcr.io/$PROJECT_ID/open-match-build'
  args: ['make', 'md-test']
  waitFor: ['Build: Clean']

- id: 'Setup: Download Dependencies'
  name: 'gcr.io/$PROJECT_ID/open-match-build'
  args: ['make', 'sync-deps']
  volumes:
  - name: 'go-vol'
    path: '/go'
  waitFor: ['Build: Clean']

- id: 'Build: Install Kubernetes Tools'
  name: 'gcr.io/$PROJECT_ID/open-match-build'
  args: ['make', 'install-kubernetes-tools']
  volumes:
  - name: 'go-vol'
    path: '/go'
  waitFor: ['Build: Clean']

- id: 'Build: Install Toolchain'
  name: 'gcr.io/$PROJECT_ID/open-match-build'
  args: ['make', 'install-toolchain']
  volumes:
  - name: 'go-vol'
    path: '/go'
  waitFor: ['Setup: Download Dependencies']

- id: 'Build: Assets'
  name: 'gcr.io/$PROJECT_ID/open-match-build'
  args: ['make', 'assets', '-j12']
  volumes:
  - name: 'go-vol'
    path: '/go'
  waitFor: ['Build: Install Toolchain']

- id: 'Build: Binaries'
  name: 'gcr.io/$PROJECT_ID/open-match-build'
  args: ['make', 'GOPROXY=off', 'build', 'all', '-j12']
  volumes:
  - name: 'go-vol'
    path: '/go'
  waitFor: ['Build: Assets']

- id: 'Test: Services'
  name: 'gcr.io/$PROJECT_ID/open-match-build'
  args: ['make', 'GOPROXY=off', 'GOLANG_TEST_COUNT=10', 'test']
  volumes:
  - name: 'go-vol'
    path: '/go'
  waitFor: ['Build: Assets']

- id: 'Build: Docker Images'
  name: 'gcr.io/$PROJECT_ID/open-match-build'
  args: ['make', '_GCB_POST_SUBMIT=${_GCB_POST_SUBMIT}', '_GCB_LATEST_VERSION=${_GCB_LATEST_VERSION}', 'SHORT_SHA=${SHORT_SHA}', 'BRANCH_NAME=${BRANCH_NAME}', 'push-images', '-j8']
  waitFor: ['Build: Assets']

- id: 'Build: Deployment Configs'
  name: 'gcr.io/$PROJECT_ID/open-match-build'
  args: ['make', 'VERSION_SUFFIX=$SHORT_SHA', 'clean-install-yaml', 'install/yaml/']
  waitFor: ['Build: Install Toolchain']

- id: 'Lint: Format, Vet, Charts'
  name: 'gcr.io/$PROJECT_ID/open-match-build'
  args: ['make', 'lint']
  volumes:
  - name: 'go-vol'
    path: '/go'
  waitFor: ['Build: Assets', 'Build: Deployment Configs']

- id: 'Test: Create Cluster'
  name: 'gcr.io/$PROJECT_ID/open-match-build'
  args: ['make', 'SHORT_SHA=${SHORT_SHA}', 'delete-gke-cluster', 'create-gke-cluster', 'push-helm']
  waitFor: ['Build: Install Kubernetes Tools']

- id: 'Test: Deploy Open Match'
  name: 'gcr.io/$PROJECT_ID/open-match-build'
  args: ['make', 'SHORT_SHA=${SHORT_SHA}', 'install-e2e-chart']
  waitFor: ['Test: Create Cluster', 'Build: Docker Images']

- id: 'Test: End-to-End Cluster'
  name: 'gcr.io/$PROJECT_ID/open-match-build'
  args: ['make', 'GOPROXY=off', 'SHORT_SHA=${SHORT_SHA}', 'test-e2e-cluster']
  waitFor: ['Test: Deploy Open Match', 'Build: Assets']
  volumes:
  - name: 'go-vol'
    path: '/go'

- id: 'Test: Delete Cluster'
  name: 'gcr.io/$PROJECT_ID/open-match-build'
  args: ['make', 'SHORT_SHA=${SHORT_SHA}', 'GCLOUD_EXTRA_FLAGS=--async', 'GCP_PROJECT_ID=${PROJECT_ID}', 'ci-reap-clusters', 'delete-gke-cluster']
  waitFor: ['Test: End-to-End Cluster']

- id: 'Deploy: Deployment Configs'
  name: 'gcr.io/$PROJECT_ID/open-match-build'
  args: ['make', '_GCB_POST_SUBMIT=${_GCB_POST_SUBMIT}', '_GCB_LATEST_VERSION=${_GCB_LATEST_VERSION}', 'VERSION_SUFFIX=${SHORT_SHA}', 'BRANCH_NAME=${BRANCH_NAME}', 'ci-deploy-artifacts']
  waitFor: ['Lint: Format, Vet, Charts', 'Test: Deploy Open Match']
  volumes:
  - name: 'go-vol'
    path: '/go'

artifacts:
    objects:
        location: gs://open-match-build-artifacts/output/
        paths:
            - cmd/backend/backend
            - cmd/frontend/frontend
            - cmd/mmfproxy/mmfproxy
            - cmd/mmlogic/mmlogic
            - cmd/synchronizer/synchronizer
            - cmd/minimatch/minimatch
            - cmd/swaggerui/swaggerui
            - install/yaml/install.yaml
            - install/yaml/install-demo.yaml
            - install/yaml/01-redis-chart.yaml
            - install/yaml/02-open-match.yaml
            - install/yaml/03-prometheus-chart.yaml
            - install/yaml/04-grafana-chart.yaml
            - install/yaml/05-jaeger-chart.yaml
            - examples/functions/golang/soloduel/soloduel
            - examples/functions/golang/pool/pool
            - examples/evaluator/golang/simple/simple
            - tools/certgen/certgen
            - tools/reaper/reaper

images:
- 'gcr.io/$PROJECT_ID/openmatch-backend:${_OM_VERSION}-${SHORT_SHA}'
- 'gcr.io/$PROJECT_ID/openmatch-frontend:${_OM_VERSION}-${SHORT_SHA}'
- 'gcr.io/$PROJECT_ID/openmatch-mmfproxy:${_OM_VERSION}-${SHORT_SHA}'
- 'gcr.io/$PROJECT_ID/openmatch-mmlogic:${_OM_VERSION}-${SHORT_SHA}'
- 'gcr.io/$PROJECT_ID/openmatch-synchronizer:${_OM_VERSION}-${SHORT_SHA}'
- 'gcr.io/$PROJECT_ID/openmatch-minimatch:${_OM_VERSION}-${SHORT_SHA}'
- 'gcr.io/$PROJECT_ID/openmatch-demo:${_OM_VERSION}-${SHORT_SHA}'
- 'gcr.io/$PROJECT_ID/openmatch-mmf-go-soloduel:${_OM_VERSION}-${SHORT_SHA}'
- 'gcr.io/$PROJECT_ID/openmatch-mmf-go-pool:${_OM_VERSION}-${SHORT_SHA}'
- 'gcr.io/$PROJECT_ID/openmatch-evaluator-go-simple:${_OM_VERSION}-${SHORT_SHA}'
- 'gcr.io/$PROJECT_ID/openmatch-swaggerui:${_OM_VERSION}-${SHORT_SHA}'
- 'gcr.io/$PROJECT_ID/openmatch-reaper:${_OM_VERSION}-${SHORT_SHA}'
substitutions:
    _OM_VERSION: "0.0.0-dev"
    _GCB_POST_SUBMIT: "0"
    _GCB_LATEST_VERSION: "undefined"
logsBucket: 'gs://open-match-build-logs/'
options:
  sourceProvenanceHash: ['SHA256']
  machineType: 'N1_HIGHCPU_32'
timeout: 2500s
